// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMainGGX
#pragma kernel CSMainBRDF 

#define PI 3.14159265359

int _Resolution;

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
// RWTexture2D<float4> _Result;
RWStructuredBuffer<float4> _Result;

float RadicalInverse_VdC(uint bits)
{
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10; // / 0x100000000
}
//生成[0,1]均匀分布的随机数
float2 Hammersley(uint i, uint N)
{
    return float2(float(i) / float(N), RadicalInverse_VdC(i));
}

// 重要性采样获得采样方向
float3 ImportanceSampleGGX(float2 Xi, float3 N, float roughness)
{
    float a = roughness * roughness;
    // 根据GGX的cdf的反函数求得
    float phi = 2.0 * PI * Xi.x;
    float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a * a - 1.0) * Xi.y));
    float sinTheta = sqrt(1.0 - cosTheta * cosTheta);

    // 转笛卡尔坐标
    float3 H;
    H.x = cos(phi) * sinTheta;
    H.y = sin(phi) * sinTheta;
    H.z = cosTheta;

    //切空间转换到世界空间
    float3 up = abs(N.z) < 0.999 ? float3(0, 0, 1) : float3(1, 0, 0);
    float3 tangent = normalize(cross(up, N));
    float3 bitangent = cross(N, tangent);

    float3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
    return normalize(sampleVec);
}

float DistributionGGX(float3 NoH, float roughness)
{
    float a = roughness * roughness;
    float a2 = a * a;
    float NoH2 = NoH * NoH;
    float nom = a2;
    float denom = (NoH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;
    return nom  / denom;
}

// #TODO 这部分用来生成environment specular 的lighting irradiance部分
[numthreads(1, 1, 1)]
void CSMainGGX(uint3 did : SV_DispatchThreadID)
{
    float2 uv = (float2)did.xy / float2(_Resolution, _Resolution) + 0.5 / float2(_Resolution, _Resolution);
    uint index = did.y * _Resolution + did.x;
    // float3 dir = 
}



float GeometrySchlickGGX(float NoV, float roughness)
{
    float a = roughness;
    // 这里IBL和直接光照不一样
    float k = (a * a) / 2.0;

    float nom = NoV;
    float denom = NoV * (1.0 - k) + k;
    return nom / denom;
}

//
float GeometrySmith(float3 N, float3 V, float3 L, float roughness)
{
    float NoV = max(dot(N, V), 0.0);
    float NoL = max(dot(N, L), 0.0);
    float ggx2 = GeometrySchlickGGX(NoV, roughness);
    float ggx1 = GeometrySchlickGGX(NoL, roughness);

    return ggx1 * ggx2;
}



[numthreads(8,8,1)]
void CSMainBRDF (uint3 dtid : SV_DispatchThreadID)
{
    float2 uv = (float2)dtid.xy / float2(_Resolution, _Resolution) + 0.5 / float2(_Resolution, _Resolution);
    uint index = dtid.y * _Resolution + dtid.x;

    float NoV = uv.x;
    float roughness = uv.y;
    // V为什么是这个???
    float3 V = float3(sqrt(1.0 - NoV * NoV), 0, NoV);

    float scale = 0.0;
    float bias = 0.0;

    float3 N = float3(0, 0, 1);
    
    const uint SAMPLE_COUNT = 2048;
    for (uint i = 0; i < SAMPLE_COUNT; ++i)
    {
        float2 Xi = Hammersley(i, SAMPLE_COUNT);
        float3 H = ImportanceSampleGGX(Xi, N, roughness);
        float3 L = normalize(2.0 * dot(V, H) * H - V);

        float NoL = max(L.z, 0.0);
        float NoH = max(H.z, 0.0);
        float VoH = max(dot(V, H), 0.0);

        if (NoL > 0.0)
        {
            float G = GeometrySmith(N, V, L, roughness);
            float G_Vis = (G * VoH) / ( NoH * NoV);
            float Fc = pow(1.0 - VoH, 5.0);

            scale += (1.0 - Fc) * G_Vis;
            bias += Fc * G_Vis;
        }
    }

    scale /= float(SAMPLE_COUNT);
    bias /= float(SAMPLE_COUNT);

    _Result[index] = float4(scale, bias, 0, 1);
    // _Result[index] = float4(1, 0, 0, 1);
}
