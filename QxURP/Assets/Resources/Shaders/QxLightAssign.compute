// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel LightAssign

// 每个cluster 平截头体的8个顶点
struct ClusterFustum
{
    float3 p0, p1, p2, p3, p4, p5, p6, p7;
};

struct PointLight
{
    float3 color;
    float intensity;
    float3 position;
    float radius;
};

struct LightIndex
{
    int count;
    int start;
};

RWStructuredBuffer<ClusterFustum> _clusterBuffer;
RWStructuredBuffer<PointLight> _lightBuffer;
RWStructuredBuffer<uint> _lightAssignBuffer;
RWStructuredBuffer<LightIndex> _assignTable;

float _numClusterX;
float _numClusterY;
float _numClusterZ;
int _numLights;
int _maxNumLightsPerCluster;

uint Index3DTo1D(uint3 index3D)
{
    return index3D.z * _numClusterX * _numClusterY +
        index3D.y * _numClusterX +
            index3D.x;
}

bool PointSphereIntersect(float3 p, float4 sphere)
{
    return distance(p, sphere.xyz) < sphere.w;
}

// 现在这个求交只是简单实现，问题是存在8个顶点都不在球内，但依然相交的情况 #TODO
bool ClusterLightIntersect(PointLight point_light, ClusterFustum frustum)
{
    float4 sphere = float4(point_light.position, point_light.radius);
    return PointSphereIntersect(frustum.p0, sphere) ||
            PointSphereIntersect(frustum.p1, sphere) ||
            PointSphereIntersect(frustum.p2, sphere) ||
            PointSphereIntersect(frustum.p3, sphere) ||
            PointSphereIntersect(frustum.p4, sphere) ||
            PointSphereIntersect(frustum.p5, sphere) ||
            PointSphereIntersect(frustum.p6, sphere) ||
            PointSphereIntersect(frustum.p7, sphere) ;
}

// 每个线程对应一个cluster
[numthreads(16, 16, 1)]
void LightAssign(
    uint3 grid : SV_GroupThreadID,
    uint3 gid : SV_GroupID
    )
{
    // cluster id
    uint i = grid.x, j = grid.y, k = gid.x;
    uint3 clusterID_3D = uint3(i,j,k);
    uint clusterID_1D = Index3DTo1D(clusterID_3D);

    // 当前cluster对应的frustum
    ClusterFustum curFrustum = _clusterBuffer[clusterID_1D];

    // 在light assign buffer中索引
    uint startIndex = clusterID_1D * _maxNumLightsPerCluster;
    uint endIndex = startIndex;

    // 遍历光源, 和光源求交, 相交时添加到assignBuffer中
    for (int lightIndex = 0; lightIndex < _numLights; ++lightIndex)
    {
        PointLight pl = _lightBuffer[lightIndex];
        if (ClusterLightIntersect(pl, curFrustum))
        {
            _lightAssignBuffer[endIndex++] = uint(lightIndex);
        }
    }

    // 结果写到assign table
    LightIndex idx;
    idx.count = endIndex - startIndex;
    idx.start = startIndex;

    _assignTable[clusterID_1D] = idx;
}